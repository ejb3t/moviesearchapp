{"version":3,"sources":["components/Search.jsx","components/Movies.jsx","components/ListOfMovies.jsx","components/NotFound.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Search","setInputMovie","useState","search","setSearch","onSubmit","event","preventDefault","className","required","name","type","onChange","target","value","htmlFor","Movies","props","Title","Year","src","Poster","loading","alt","ListOfMovies","movies","map","item","key","imdbID","NotFound","App","API_KEY","process","console","log","inputMovie","setMovies","API_URL","useEffect","axios","get","then","res","data","catch","err","message","Error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"gPAgCeA,EA7BA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACRC,mBAAS,IADD,mBAC7BC,EAD6B,KACrBC,EADqB,KAUpC,OACE,6BACE,0BAAMC,SANW,SAACC,GACpBA,EAAMC,iBACNN,EAAcE,KAKV,yBAAKK,UAAU,qBACb,2BACEA,UAAU,cACVC,UAAQ,EACRC,KAAK,SACLC,KAAK,OACLC,SAjBW,SAACN,GACpBF,EAAUE,EAAMO,OAAOC,UAkBjB,2BAAOC,QAAQ,SAASP,UAAU,eAAlC,uBCbKQ,EATA,SAACC,GAAD,OACb,yBAAKT,UAAU,SACb,uBAAGA,UAAU,gBAAgBS,EAAMC,OACnC,uBAAGV,UAAU,eAAeS,EAAME,MAElC,yBAAKC,IAAKH,EAAMI,OAAQC,QAAQ,OAAOC,IAAI,kBCIhCC,EARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAEnB,yBAAKjB,UAAU,mBACXiB,EAAOzB,QACHyB,EAAOzB,OAAO0B,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,eAAQC,IAAKD,EAAKE,QAAYF,SCCrDG,EANE,kBACf,6BACE,gDCoCWC,MAlCf,WACE,IAAMC,EAAO,UAAMC,YACnBC,QAAQC,IAAIH,GAFC,MAGuB9B,mBAAS,IAHhC,mBAGNkC,EAHM,KAGMnC,EAHN,OAIeC,mBAAS,IAJxB,mBAINuB,EAJM,KAIEY,EAJF,KAKPC,EAAO,0CAAsCN,EAAtC,kBAcb,OAbAE,QAAQC,IAAIG,GAEZC,qBAAU,WACRC,IACGC,IADH,UACUH,GADV,OACoBF,IACjBM,MAAK,SAACC,GACLN,EAAUM,EAAIC,SAEfC,OAAM,SAACC,GACNZ,QAAQC,IAAIW,EAAIC,cAEnB,CAACX,IAGF,yBAAK5B,UAAU,OACb,gCACE,iDAEF,kBAAC,EAAD,CAAQP,cAAeA,IACL,qBAAjBwB,EAAOuB,MACN,kBAAC,EAAD,MAEA,kBAAC,EAAD,CAAcvB,OAAQA,MCtBVwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBlB,MAAK,SAAAmB,GACJA,EAAaC,gBAEdjB,OAAM,SAAAkB,GACL7B,QAAQ6B,MAAMA,EAAMhB,c","file":"static/js/main.277d23f3.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Search = ({ setInputMovie }) => {\r\n  const [search, setSearch] = useState(\"\");\r\n  const handleChange = (event) => {\r\n    setSearch(event.target.value);\r\n  };\r\n\r\n  const handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    setInputMovie(search);\r\n  };\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <div className=\"form__group field\">\r\n          <input\r\n            className=\"form__field\"\r\n            required\r\n            name=\"search\"\r\n            type=\"text\"\r\n            onChange={handleChange}\r\n          />\r\n          <label htmlFor=\"search\" className=\"form__label\">\r\n            Find a Movie...\r\n          </label>\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default Search;\r\n// Search.propTypes = {\r\n//   setInputMovie: PropTypes.objectOf(PropTypes.object).isRequired,\r\n// };\r\n","import React from 'react';\r\n\r\nconst Movies = (props) => (\r\n  <div className=\"movie\">\r\n    <p className=\"movie__title\">{props.Title}</p>\r\n    <p className=\"movie__year\">{props.Year}</p>\r\n\r\n    <img src={props.Poster} loading=\"lazy\" alt=\"props.Title\" />\r\n  </div>\r\n);\r\n\r\nexport default Movies;\r\n","import React from 'react';\r\nimport Movies from './Movies';\r\n\r\nconst ListOfMovies = ({ movies }) => (\r\n\r\n  <div className=\"movie_container\">\r\n    { movies.Search\r\n       && movies.Search.map((item) => <Movies key={item.imdbID} {...item} />)}\r\n  </div>\r\n);\r\n\r\nexport default ListOfMovies;\r\n","import React from 'react';\r\n\r\nconst NotFound = () => (\r\n  <div>\r\n    <p>No cosegui nada</p>\r\n  </div>\r\n);\r\n\r\nexport default NotFound;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\nimport Search from \"./components/Search\";\r\nimport ListOfMovies from \"./components/ListOfMovies\";\r\nimport NotFound from \"./components/NotFound\";\r\n\r\nfunction App() {\r\n  const API_KEY = `${process.env.REACT_APP_API_KEY}`;\r\n  console.log(API_KEY);\r\n  const [inputMovie, setInputMovie] = useState(\"\");\r\n  const [movies, setMovies] = useState({});\r\n  const API_URL = `https://www.omdbapi.com/?apikey=${API_KEY}&type=Movie&s=`;\r\n  console.log(API_URL);\r\n\r\n  useEffect(() => {\r\n    axios\r\n      .get(`${API_URL}${inputMovie}`)\r\n      .then((res) => {\r\n        setMovies(res.data);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err.message);\r\n      });\r\n  }, [inputMovie]);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Movie Search App</h1>\r\n      </header>\r\n      <Search setInputMovie={setInputMovie} />\r\n      {movies.Error === \"Movie not found!\" ? (\r\n        <NotFound />\r\n      ) : (\r\n        <ListOfMovies movies={movies} />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n\r\n  <App />, document.getElementById('root'),\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}