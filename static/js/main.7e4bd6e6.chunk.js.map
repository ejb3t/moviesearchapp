{"version":3,"sources":["components/Search.jsx","components/Movies.jsx","components/ListOfMovies.jsx","components/NotFound.jsx","App.jsx","serviceWorker.js","index.jsx"],"names":["Search","setInputMovie","useState","search","setSearch","onSubmit","event","preventDefault","className","required","name","type","onChange","target","value","htmlFor","Movies","props","Title","Year","src","Poster","loading","alt","ListOfMovies","movies","map","item","key","imdbID","NotFound","App","inputMovie","setMovies","useEffect","axios","get","then","res","data","catch","err","console","log","message","Error","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error"],"mappings":"gPAwBeA,EArBA,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACRC,mBAAS,IADD,mBAC7BC,EAD6B,KACrBC,EADqB,KAUpC,OACE,6BACE,0BAAMC,SANW,SAACC,GACpBA,EAAMC,iBACNN,EAAcE,KAKV,yBAAKK,UAAU,qBACb,2BAAOA,UAAU,cAAcC,UAAQ,EAACC,KAAK,SAASC,KAAK,OAAOC,SAZrD,SAACN,GACpBF,EAAUE,EAAMO,OAAOC,UAYjB,2BAAOC,QAAQ,SAASP,UAAU,eAAlC,oBCPKQ,EATA,SAACC,GAAD,OACb,yBAAKT,UAAU,SACb,uBAAGA,UAAU,gBAAgBS,EAAMC,OACnC,uBAAGV,UAAU,eAAeS,EAAME,MAElC,yBAAKC,IAAKH,EAAMI,OAAQC,QAAQ,OAAOC,IAAI,kBCIhCC,EARM,SAAC,GAAD,IAAGC,EAAH,EAAGA,OAAH,OAEnB,yBAAKjB,UAAU,mBACXiB,EAAOzB,QACHyB,EAAOzB,OAAO0B,KAAI,SAACC,GAAD,OAAU,kBAAC,EAAD,eAAQC,IAAKD,EAAKE,QAAYF,SCCrDG,EANE,kBACf,6BACE,gDC+BWC,MA5Bf,WAAgB,IAAD,EACuB7B,mBAAS,IADhC,mBACN8B,EADM,KACM/B,EADN,OAEeC,mBAAS,IAFxB,mBAENuB,EAFM,KAEEQ,EAFF,KAeb,OAVAC,qBAAU,WACRC,IAAMC,IAAN,UAHc,0DAGd,OAAuBJ,IACpBK,MAAK,SAACC,GACLL,EAAUK,EAAIC,SAEfC,OAAM,SAACC,GACNC,QAAQC,IAAIF,EAAIG,cAEnB,CAACZ,IAGF,yBAAKxB,UAAU,OACb,gCACE,iDAEF,kBAAC,EAAD,CAAQP,cAAeA,IACL,qBAAjBwB,EAAOoB,MACJ,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcpB,OAAQA,MClBZqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAEP,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H7B,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpB,MAAK,SAAAqB,GACJA,EAAaC,gBAEdnB,OAAM,SAAAoB,GACLlB,QAAQkB,MAAMA,EAAMhB,c","file":"static/js/main.7e4bd6e6.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n\nconst Search = ({ setInputMovie }) => {\n  const [search, setSearch] = useState('');\n  const handleChange = (event) => {\n    setSearch(event.target.value);\n  };\n\n  const handleSubmit = (event) => {\n    event.preventDefault();\n    setInputMovie(search);\n  };\n  return (\n    <div>\n      <form onSubmit={handleSubmit}>\n        <div className=\"form__group field\">\n          <input className=\"form__field\" required name=\"search\" type=\"text\" onChange={handleChange} />\n          <label htmlFor=\"search\" className=\"form__label\">Find a Movie</label>\n        </div>\n      </form>\n    </div>\n  );\n};\nexport default Search;\n// Search.propTypes = {\n//   setInputMovie: PropTypes.objectOf(PropTypes.object).isRequired,\n// };\n","import React from 'react';\n\nconst Movies = (props) => (\n  <div className=\"movie\">\n    <p className=\"movie__title\">{props.Title}</p>\n    <p className=\"movie__year\">{props.Year}</p>\n\n    <img src={props.Poster} loading=\"lazy\" alt=\"props.Title\" />\n  </div>\n);\n\nexport default Movies;\n","import React from 'react';\nimport Movies from './Movies';\n\nconst ListOfMovies = ({ movies }) => (\n\n  <div className=\"movie_container\">\n    { movies.Search\n       && movies.Search.map((item) => <Movies key={item.imdbID} {...item} />)}\n  </div>\n);\n\nexport default ListOfMovies;\n","import React from 'react';\n\nconst NotFound = () => (\n  <div>\n    <p>No cosegui nada</p>\n  </div>\n);\n\nexport default NotFound;\n","import React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport Search from './components/Search';\nimport ListOfMovies from './components/ListOfMovies';\nimport NotFound from './components/NotFound';\n\n\nfunction App() {\n  const [inputMovie, setInputMovie] = useState('');\n  const [movies, setMovies] = useState({});\n  const API_URL = 'https://www.omdbapi.com/?apikey=2c07745b&type=Movie&s=';\n\n  useEffect(() => {\n    axios.get(`${API_URL}${inputMovie}`)\n      .then((res) => {\n        setMovies(res.data);\n      })\n      .catch((err) => {\n        console.log(err.message);\n      });\n  }, [inputMovie]);\n\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>Movie Search App</h1>\n      </header>\n      <Search setInputMovie={setInputMovie} />\n      {movies.Error === 'Movie not found!'\n        ? <NotFound />\n        : <ListOfMovies movies={movies} />}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n\n  <App />, document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}